<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <metadata name="$this.Locked" type="System.Boolean, mscorlib, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089">
    <value>True</value>
  </metadata>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        D///+B////4/////P////x////9f////n/8=
</value>
  </data>
</root>